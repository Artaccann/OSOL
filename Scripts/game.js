console.log('OSOL');

var canvas = document.getElementById('game-canvas');
var context = canvas.getContext('2d');

// Funkce pro nastaven√≠ velikosti canvasu a p≈ôekreslen√≠ obr√°zku
function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    drawCoverImage(base_image);
}

// Naƒçte obr√°zek a ulo≈æ√≠ ho do promƒõnn√©
let base_image = new Image();
base_image.src = '../Sprites/room.png';
base_image.onload = function () {
    resizeCanvas(); // Zavol√° se, jakmile se obr√°zek naƒçte
};

// P≈ôekresluje obr√°zek tak, aby pokr√Ωval cel√Ω canvas
function drawCoverImage(img) {
    let imgRatio = img.width / img.height;
    let canvasRatio = canvas.width / canvas.height;

    let drawWidth, drawHeight, offsetX, offsetY;

    if (imgRatio > canvasRatio) {
        drawWidth = canvas.height * imgRatio;
        drawHeight = canvas.height;
        offsetX = (canvas.width - drawWidth) / 2;
        offsetY = 0;
    } else {
        drawWidth = canvas.width;
        drawHeight = canvas.width / imgRatio;
        offsetX = 0;
        offsetY = (canvas.height - drawHeight) / 2;
    }

    context.clearRect(0, 0, canvas.width, canvas.height);
    context.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
}

// Event listener pro zmƒõnu velikosti okna
window.addEventListener('resize', resizeCanvas);


// Spu≈°tƒõn√≠ hry a vykreslen√≠ prvn√≠ sc√©ny
function startGame() {
    console.log("üöÄ Spou≈°t√≠m hru...");
    console.log("üìå Kontrola Loader.scenes p≈ôi startu:", Loader.scenes);

    if (!Loader.scenes["chapter1"]) {
        console.error("‚ùå Chyba: Sc√©na 'chapter1' nebyla naƒçtena. ƒåek√°m 500ms...");
        setTimeout(startGame, 500); // Pokud nen√≠ naƒçteno, ƒçek√° a zkou≈°√≠ znovu
        return;
    }

    console.log("‚úÖ Sc√©na 'chapter1' byla naƒçtena:", Loader.scenes["chapter1"]);
    showScene("chapter1"); // Prvn√≠ sc√©na


}



console.log("üìå Loader.scenes p≈ôed spu≈°tƒõn√≠m hry:", Loader.scenes);
console.log("üìå Loader.scenes['chapter1'] p≈ôed spu≈°tƒõn√≠m hry:", Loader.scenes["chapter1"]);


function showScene(sceneName) {
    let scene = Loader.scenes[sceneName];
    if (!scene) {
        console.error(`‚ùå Chyba: Sc√©na '${sceneName}' neexistuje.`);
        return;
    }
    


    console.log(`üìå Zobrazen√≠ sc√©ny '${sceneName}':`, scene);

    let textContainer = document.getElementById("text-container");
    textContainer.innerHTML = ""; // ‚ùó Vyma≈æe p≈ôedchoz√≠ text

    let choicesContainer = document.getElementById("choices-container");
    choicesContainer.innerHTML = ""; // ‚ùó Vyma≈æe p≈ôedchoz√≠ tlaƒç√≠tka

    let textLines = scene.text || [];
    if (textLines.length === 0) {
        console.warn(`‚ö†Ô∏è Sc√©na '${sceneName}' nem√° ≈æ√°dn√Ω text!`);
        textLines = ["‚ö†Ô∏è Tato sc√©na je pr√°zdn√°!"];
    }

    let index = 0; // Aktu√°ln√≠ ≈ô√°dek

    function showNextLine() {
        if (index < textLines.length) {
            textContainer.innerHTML = ""; // ‚ùó Vyma≈æe p≈ôedchoz√≠ ≈ô√°dek

            let p = document.createElement("p");
            textContainer.appendChild(p);

            typeWriterEffect(p, textLines[index], () => {
                index++;
            });
        } else {
            console.log("‚úÖ Konec textu. Zobraz√≠m volby.");
            showChoices(scene.choices || []);
            textContainer.removeEventListener("click", showNextLine);
        }
    }

    textContainer.addEventListener("click", showNextLine);
    showNextLine(); // Zobraz√≠ prvn√≠ ≈ô√°dek
}

// Efekt psac√≠ho stroje (text se zobrazuje znak po znaku)
function typeWriterEffect(element, text, callback) {
    let i = 0;
    element.innerHTML = ""; // Vyma≈æe star√Ω text
    let speed = 30; // Rychlost psan√≠ (v ms)

    function type() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(type, speed);
        } else {
            if (callback) callback(); // Zavol√° callback po dops√°n√≠
        }
    }

    type();
}


// Zobraz√≠ mo≈ænosti volby hr√°ƒçe
function showChoices(choices) {
    let choicesContainer = document.getElementById("choices-container");
    choicesContainer.innerHTML = ""; // Vyma≈æe p≈ôedchoz√≠ volby

    choices.forEach(choice => {
        let match = choice.match(/\[([^\]]+)\]\(#([^\)]+)\)/);
        if (match) {
            let choiceText = match[1]; // Text volby
            let targetScene = match[2]; // C√≠lov√° sc√©na

            let button = document.createElement("button");
            button.innerText = choiceText;
            button.onclick = function() {
                showScene(targetScene);
            };
            choicesContainer.appendChild(button);
        }
    });
}

// Kliknut√≠m na text se p≈ôeskoƒç√≠ animace psac√≠ho stroje
document.getElementById("text-container").addEventListener("click", function() {
    let textContainer = document.getElementById("text-container");
    if (textContainer.innerHTML.length < textContainer.dataset.fullText.length) {
        textContainer.innerHTML = textContainer.dataset.fullText; // Okam≈æitƒõ zobraz√≠ cel√Ω text
    }
});

function showNextLine() {
    if (index < textLines.length) {
        textContainer.innerHTML = ""; // ‚ùó Vyma≈æe p≈ôedchoz√≠ ≈ô√°dek

        let p = document.createElement("p");
        textContainer.appendChild(p);

        typeWriterEffect(p, textLines[index], () => {
            index++;

            // Dynamick√° √∫prava velikosti text-boxu a dialog-window
            let textBox = document.querySelector(".text-box");
            let dialogWindow = document.querySelector(".dialog-window");

            textBox.style.height = "auto"; // Reset v√Ω≈°ky
            dialogWindow.style.height = "auto"; // Reset v√Ω≈°ky

            let newHeight = Math.min(textContainer.scrollHeight + 40, window.innerHeight * 0.5) + "px"; // Zvƒõt≈°√≠, ale nikdy nep≈ôekroƒç√≠ 50 % v√Ω≈°ky okna
            textBox.style.height = newHeight;
            dialogWindow.style.height = newHeight;
        });
    } else {
        console.log("‚úÖ Konec textu. Zobraz√≠m volby.");
        showChoices(scene.choices || []);
        textContainer.removeEventListener("click", showNextLine);
    }

    function skipToNextChoice() {
    console.log("‚è© Skip stisknut! P≈ôeskakuji na dal≈°√≠ rozhodnut√≠...");

    // Najdeme nejbli≈æ≈°√≠ rozhodnut√≠ (choice) v aktu√°ln√≠ sc√©nƒõ
    while (index < textLines.length) {
        if (textLines[index].match(/\[([^\]]+)\]\(#([^\)]+)\)/)) {
            console.log(`‚è© P≈ôeskoƒçeno k volbƒõ: ${textLines[index]}`);
            textContainer.innerHTML = ""; // Vyƒçist√≠ text
            showChoices(scene.choices || []); // Zobraz√≠ volby
            return;
        }
        index++;
    }

    // Pokud ve sc√©nƒõ ≈æ√°dn√© rozhodnut√≠ nen√≠, nech√°me hru dobƒõhnout norm√°lnƒõ
    console.log("‚è© Nebyla nalezena ≈æ√°dn√° volba, pokraƒçuji norm√°lnƒõ.");
    index = textLines.length; 
}

    
}

